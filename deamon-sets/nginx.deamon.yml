# Kubernetes DaemonSet Configuration Example
# ======================================

# What is a DaemonSet?
# ------------------
# A DaemonSet ensures that all (or some) nodes in a Kubernetes cluster run a copy of a Pod.
# As nodes are added to the cluster, Pods are added to them.
# As nodes are removed from the cluster, those Pods are garbage collected.

# Common Use Cases for DaemonSets:
# -----------------------------
# 1. Running cluster storage daemons (e.g., ceph, glusterd)
# 2. Running log collection daemons (e.g., fluentd, logstash)
# 3. Running node monitoring daemons (e.g., Prometheus Node Exporter)
# 4. Running system daemons (e.g., kube-proxy)

# Common kubectl Commands for DaemonSet Management
# -------------------------------------------
# Create and List:
#   kubectl apply -f nginx.daemon.yml           # Create/update DaemonSet
#   kubectl get daemonsets                      # List all DaemonSets
#   kubectl get ds                              # Short form for DaemonSets
#
# DaemonSet Information:
#   kubectl describe daemonset nginx-daemon     # Show detailed information
#   kubectl get daemonset nginx-daemon -o yaml  # Get configuration in YAML
#
# DaemonSet Operations:
#   kubectl rollout status ds/nginx-daemon      # Check rollout status
#   kubectl rollout history ds/nginx-daemon     # View rollout history
#   kubectl rollout undo ds/nginx-daemon        # Rollback to previous version
#
# Maintenance:
#   kubectl delete daemonset nginx-daemon       # Delete DaemonSet
#   kubectl scale daemonset nginx-daemon --replicas=0  # Scale down (careful!)

# Best Practices:
# -------------
# 1. Use node selectors or tolerations for targeted deployment
# 2. Set resource limits and requests
# 3. Use update strategy for controlled rollouts
# 4. Implement health checks
# 5. Use specific image tags instead of 'latest'

# DaemonSet Configuration
# =====================

apiVersion: apps/v1 # API version for DaemonSet
kind: DaemonSet # Resource type

metadata:
  name: nginx-daemon # DaemonSet name
  labels: # Labels for the DaemonSet itself
    app: nginx # Application identifier
    env: prod # Environment label
    type: daemon # Resource type label

spec:
  selector: # Pod selector - must match template labels
    matchLabels:
      app: nginx
      type: daemon

  template: # Pod template
    metadata:
      labels: # Labels for the Pods
        app: nginx
        type: daemon
    spec:
      containers:
        - name: ngnx
          image: nginx:latest
          ports:
            - containerPort: 80
# Note: DaemonSets create Pods on every node by default.
# Use nodeSelector or tolerations to run on specific nodes only.
