# Kubernetes Namespace Configuration Example
# ======================================

# What is a Namespace?
# ------------------
# A Namespace is a virtual clustuer within a Kubernetes clustuer that provides scope for names
# and allows you to divide clustuer resources between multiple users, teams, or applications.
# It helps in organizing resources and implementing resource quotas and access controls.

# Common Use Cases for Namespaces:
# -----------------------------
# 1. Multi-team environments: Separate workloads for different teams
# 2. Resource Quotas: Limit resource consumption per namespace
# 3. Environment Isolation: Separate dev, staging, and production workloads
# 4. Access Control: Apply different security policies to different namespaces

# Common kubectl Commands for Namespace Management
# --------------------------------------------
# Create and List:
#   kubectl create namespace nginx           # Create new namespace
#   kubectl get namespaces                  # List all namespaces
#   kubectl get ns                          # Short form for namespaces
#
# Namespace Information:
#   kubectl describe namespace nginx         # Show detailed namespace info
#   kubectl get namespace nginx -o yaml      # Get namespace config in YAML
#
# Working with Namespaces:
#   kubectl config set-context --current --namespace=nginx  # Switch to nginx namespace
#   kubectl api-resources --namespaced=true   # List namespaced resources
#   kubectl api-resources --namespaced=false  # List clustuer-wide resources
#
# Resource Management:
#   kubectl get all -n nginx                # List all resources in namespace
#   kubectl delete namespace nginx          # Delete namespace and its resources
#   kubectl apply -f ngnx.ns.yml           # Create/update from file

# Best Practices:
# --------------
# 1. Use meaningful namespace names
# 2. Implement resource quotas for each namespace
# 3. Apply network policies for namespace isolation
# 4. Use labels for better organization
# 5. Avoid using default namespace in production

# Namespace Configuration
# =====================

apiVersion: v1 # Core Kubernetes API version
kind: Namespace # Resource type

metadata:
  name: nginx # Namespace name - must be unique in the clustuer
  labels: # Labels for organization and selection
    env: prod # Environment label
    team: frontend # Team ownership label
    cost-center: cc-123 # Business context label

# Note: Some Kubernetes resources are namespace-scoped (like Pods, Services)
# while others are clustuer-scoped (like Nodes, PersistentVolumes)
